{"version":3,"sources":["AccountsTable/AccountsTable.js","App.js","serviceWorker.js","index.js"],"names":["AccountsTable","props","web3","useWeb3Context","data","accounts","forEach","account","supplyAmount","totalEthSupply","toFixed","borrowAmount","totalEthBorrow","ratio","state","ratioDisplay","liquidateStatus","address","supply","borrow","block","blockUpdated","liquidate","push","columns","Header","accessor","maxWidth","Cell","row","react_default","a","createElement","href","value","target","className","style","color","transition","disabled","onClick","targetAccount_","window","alert","InitiateLiquidation","es","defaultPageSize","showPageSizeOptions","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","length","refreshAccountList","src","renderAccountList","src_AccountsTable_AccountsTable","_this2","console","log","axios","method","url","headers","Accept","Content-Type","page_size","page_number","min_borrow_value_in_eth","max_collateral_ratio","then","response","newAccounts","account_values","accountData","total_borrow_value_in_eth","total_supply_value_in_eth","block_updated","setState","catch","error","Component","Boolean","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","dist_default","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a28c6782.chunk.js","sourcesContent":["import React from 'react';\n\nimport { useWeb3Context, useAccountBalance } from 'web3-react/hooks'\n\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\nimport './AccountsTable.css';\n\nfunction InitiateLiquidation(targetAccount_, web3) {\n  const myAccount = web3.address; // account of liquidator\n  const targetAccount = targetAccount_; // account in default\n  const assetBorrow = '...'; // asset target borrowed (in default)\n  const assetCollateral = '...'; // asset target supplied as collateral\n  const requestAmountClose = -1;\n\n  // var context = useWeb3Context();\n  window.alert(\"Liquidation coming soonâ„¢\");\n  // const moneyMarket = MoneyMarket.at('');\n  // moneyMarket.methods.liquidiate(targetAccount, assetBorrow, assetCollateral, requestAmountClose).send({ from: myAccount }).on('transactionHash', (trxHash) => {\n  //   console.log(`View your liquidation trx at: https://etherscan.io/tx/${trxHash}`);\n  // });\n}\n\n  function AccountsTable (props) {  \n    const web3 = useWeb3Context()\n    // const balance = useAccountBalance()\n    \n    const data = [];\n\n      props.accounts.forEach((account) => {\n        var supplyAmount = (account.totalEthSupply / 1e18).toFixed(3);\n        var borrowAmount = (account.totalEthBorrow / 1e18).toFixed(3);\n\n        var ratio = +((supplyAmount / borrowAmount).toFixed(3));\n\n        var minCollateralRatio = 1.5;\n        var riskyCollateralRatio = 2;\n\n        var state = \"\";\n\n        if (ratio < minCollateralRatio) {\n          state = \"unsafe\";\n        } else if (ratio <= riskyCollateralRatio) {\n          state = \"risky\";\n        } else {\n          state = \"safe\";\n        }\n\n        var ratioDisplay = (ratio * 100).toFixed(1) + \"%\";\n\n        var liquidateStatus = (ratio >= minCollateralRatio) ? '0' : '1';\n\n        var account = {\n          address : account.address,\n          supply : supplyAmount,\n          borrow : borrowAmount,\n          ratio : ratioDisplay,\n          state : state,\n          block : account.blockUpdated,\n          liquidate : liquidateStatus\n        }\n        data.push(account);\n      });\n\n      const columns = [\n        {\n          Header: \"Address\",\n          accessor : 'address',\n          maxWidth: 750,\n          Cell: row => (\n              <a href={'https://etherscan.io/address/' + row.value} target='_blank'>{row.value}</a>            \n          )\n\n        },\n        {\n          Header: \"Supply\",\n          accessor : 'supply',\n          maxWidth: 200,\n          className: \"right\"\n        },\n        {\n          Header: \"Borrow\",\n          accessor : 'borrow',\n          maxWidth: 200,\n          className: \"right\"\n        },\n        {\n          Header: \"Ratio\",\n          accessor : 'ratio',\n          maxWidth: 200,\n          className: \"right\"\n        },\n        {\n          Header: \"State\",\n          accessor : 'state',\n          maxWidth: 200,\n          Cell: row => (\n            <span>\n              <span style={{\n                color: row.value === 'safe' ? '#57d500' : row.value === 'risky' ? '#ffbf00' : '#ff2e00',\n                \n                transition: 'all .3s ease'\n              }}>\n                &#x25cf;\n              </span> {\n                row.value === 'safe' ? 'Safe' : row.value === 'risky' ? 'Risky' : 'Unsafe'\n              }\n            </span>\n          )\n        },\n        {\n          Header: \"\",\n          accessor : 'liquidate',\n          maxWidth: 200,\n          Cell: row => (\n            <button className=\"liquidateButton\" disabled={row.value === '0' ? true : false} \n            onClick={\n              () => InitiateLiquidation(row.row.address, web3)\n            }>Liquidate</button>\n          )\n        }\n      ];\n\n      var showPageSizeOptions = false;\n      var defaultPageSize = 20;\n\n      var minRows = defaultPageSize;\n\n    return (\n        <ReactTable \n          data={data}\n          columns={columns}\n          defaultPageSize={defaultPageSize}\n          showPageSizeOptions={showPageSizeOptions}\n          className=\"-striped\"           \n        />\n      \n    )\n  }\n\n  export default AccountsTable; ","import React, { Component } from 'react';\n\nimport AccountsTable from './AccountsTable/AccountsTable.js';\n\nimport axios from 'axios'\n\nimport { useWeb3Context, useAccountBalance } from 'web3-react/hooks'\n\nimport './App.css';\n\nimport sampleJson from './samplejson.json'\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\taccounts : []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\t\t\n\t\tif (this.state.accounts.length == 0) {\n\t\t\tthis.refreshAccountList()\n\t\t}\n\t}\n\n\trender() {\n\t\tif (this.state.accounts.length == 0) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<img src=\"./loading.gif\" className=\"Loading\"/>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\t\t\t\n\t\t\t\t<div className=\"AccountsTable\">\n\t\t\t\t\t{this.renderAccountList()}\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\trenderAccountList() {  \n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<b>Compound Accounts</b>\n\t\t\t\t<AccountsTable accounts={this.state.accounts}/>\n\t\t\t</div>\n\t\t)\n\t}\n\n\trefreshAccountList () {    \n\t\tconsole.log(\"refreshing accounts\");\n\n\t\tvar URL = 'https://api.compound.finance/api/risk/v1/get_account_values';\n\n\t\taxios({\n\t\t\tmethod: 'post',\n\t\t\turl: URL,\n\t\t\theaders : {\n\t\t\t\t'Accept' : 'application/json',\n\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t\t// ,'compound-api-key' : 'xxx'\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'page_size' : 100,\n\t\t\t\t'page_number' : 1,\n\t\t\t\t'min_borrow_value_in_eth' : {\n\t\t\t\t\t'value' : '50000000000000000'\n\t\t\t\t},\n\t\t\t\t'max_collateral_ratio' : {\n\t\t\t\t\t'value' : '5'\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(response => {\n\t\t\tconsole.log(response);\n\n\t\t\tvar newAccounts = [];\n\n\t\t\tresponse.data.account_values.forEach((accountData) => {\n\t\t\t\tvar account = {\n\t\t\t\t\taddress : accountData.address,\n\n\t\t\t\t\ttotalEthBorrow : accountData.total_borrow_value_in_eth.value,\n\n\t\t\t\t\ttotalEthSupply : accountData.total_supply_value_in_eth.value,\n\n\t\t\t\t\tblockUpdated : accountData.block_updated\n\t\t\t\t}\n\t\t\t\tnewAccounts.push(account);\n\t\t\t});\n\n\t\t\tthis.setState({\n\t\t\t\taccounts : newAccounts\n\t\t\t});\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Web3Provider from 'web3-react'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction AppWrapper () {\n  return (  \t\n    <Web3Provider>\n      <App/>\n    </Web3Provider>\n  )\n}\n\nconst rootElement = document.getElementById(\"root\")\nReactDOM.render(<AppWrapper />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}